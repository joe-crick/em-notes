; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: npx.cmd shadow-cljs -d cider/cider-nrepl:0.28.5 watch :app
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉shadow.user꞉>  ; Use `alt+enter` to evaluate
; Creating cljs repl session...
; Connecting cljs repl: shadow-cljs...
;   The Calva Connection Log might have more connection progress information.
; [:browser-repl] Configuring build.
; [:browser-repl] Compiling ...
; [:browser-repl] Build completed. (150 files, 0 compiled, 0 warnings, 2.68s)
; Connected session: cljs, repl: browser-repl
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Jack-in done.
cljs꞉cljs.user꞉>  ; Use `alt+enter` to evaluate
(def test {:one 1 :two 2 :three 3})
nil
; ------ WARNING - :redef --------------------------------------------------------
;  Resource: <eval>:1:1
;  test already refers to: cljs.core/test being replaced by: em-notes.views.people.person/test
; --------------------------------------------------------------------------------
; 
cljs꞉em-notes.views.people.person꞉> 
test
nil
cljs꞉em-notes.views.people.person꞉> 
test
nil
cljs꞉em-notes.views.people.person꞉> 
(def sut {:one 1 :two 2 :three 3})
#'em-notes.views.people.person/sut
cljs꞉em-notes.views.people.person꞉> 
sut
{:one 1, :two 2, :three 3}
cljs꞉em-notes.views.people.person꞉> 
(assoc-in sut {:one, :two, :three})

; [line 1, col 35] The map literal starting with :one on line 1 column 15 contains 3 form(s). Map literals must contain an even number of forms.
; [line 1, col 2] Unmatched delimiter ).
cljs꞉em-notes.views.people.person꞉> 
(assoc-in sut [:one] )
nil
; ------ WARNING - :fn-arity -----------------------------------------------------
;  Resource: <eval>:1:1
;  Wrong number of args (2) passed to cljs.core/assoc-in
; --------------------------------------------------------------------------------
; 
cljs꞉em-notes.views.people.person꞉> 
nil
cljs꞉em-notes.views.people.person꞉> 
(def suts {:one {:two 2 :three 3}})
#'em-notes.views.people.person/suts
cljs꞉em-notes.views.people.person꞉> 
suts
{:one {:two 2, :three 3}}
cljs꞉em-notes.views.people.person꞉> (assoc-in [:one] {:two, :three})
nil
; ------ WARNING - :fn-arity -----------------------------------------------------
;  Resource: <eval>:1:1
;  Wrong number of args (2) passed to cljs.core/assoc-in
; --------------------------------------------------------------------------------
; 
cljs꞉em-notes.views.people.person꞉> 
(assoc-in sut [:one] {:two "", :three ""})
{:one {:two "", :three ""}, :two 2, :three 3}
cljs꞉em-notes.views.people.person꞉> 
(assoc-in suts [:one] {:two "", :three ""})
{:one {:two "", :three ""}}
cljs꞉em-notes.views.people.person꞉> 
(def default-db
  {:people {}
   :person   {:first-name ""
              :last-name ""
              :team ""
              :profile
              {:feedback {:feedback-medium ""
                          :when-receive-feedback ""
                          :how-receive-recognition ""
                          :what-rewards-wanted ""}
               :mood {:what-makes-grumpy ""
                      :how-to-know-grumpy ""
                      :how-to-help-grumpy ""}
               :support {:manager ""
                         :team ""
                         :peers-outside ""}
               :growth  {:current-goals ""
                         :what-doing-now ""
                         :what-need-to-do ""}}
              :tasks []}
   :active-person   {:first-name ""
                     :last-name ""
                     :team ""
                     :profile
                     {:feedback {:feedback-medium ""
                                 :when-receive-feedback ""
                                 :how-receive-recognition ""
                                 :what-rewards-wanted ""}
                      :mood {:what-makes-grumpy ""
                             :how-to-know-grumpy ""
                             :how-to-help-grumpy ""}
                      :support {:manager ""
                                :team ""
                                :peers-outside ""}
                      :growth {:current-goals ""
                               :what-doing-now ""
                               :what-need-to-do ""}}
                     :tasks []}
   :active-task {:name ""
                 :details ""
                 :due-date ""
                 :completed false}
   :toasts []})
#'em-notes.views.people.person/default-db
cljs꞉em-notes.views.people.person꞉> 
(def default-db
  {:people {}
   :person   {:first-name ""
              :last-name ""
              :team ""
              :profile
              {:feedback {:feedback-medium ""
                          :when-receive-feedback ""
                          :how-receive-recognition ""
                          :what-rewards-wanted ""}
               :mood {:what-makes-grumpy ""
                      :how-to-know-grumpy ""
                      :how-to-help-grumpy ""}
               :support {:manager ""
                         :team ""
                         :peers-outside ""}
               :growth  {:current-goals ""
                         :what-doing-now ""
                         :what-need-to-do ""}}
              :tasks []}
   :active-person   {:first-name ""
                     :last-name ""
                     :team ""
                     :profile
                     {:feedback {:feedback-medium ""
                                 :when-receive-feedback ""
                                 :how-receive-recognition ""
                                 :what-rewards-wanted ""}
                      :mood {:what-makes-grumpy ""
                             :how-to-know-grumpy ""
                             :how-to-help-grumpy ""}
                      :support {:manager ""
                                :team ""
                                :peers-outside ""}
                      :growth {:current-goals ""
                               :what-doing-now ""
                               :what-need-to-do ""}}
                     :tasks []}
   :active-task {:name ""
                 :details ""
                 :due-date ""
                 :completed false}
   :toasts []})